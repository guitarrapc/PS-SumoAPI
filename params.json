{"name":"Ps-sumologicapi","tagline":"PowerShell SumoLogic API Management Module","body":"PSSumoLogicAPI\r\n==========\r\n\r\nPSSumoLogicApi will help you manage SumoLogic Collector management automation.\r\n\r\nUnfortunately there are no management for bulk collectors on Web UI of SumoLogic. Therefore API is needed to manage hundred of collectors, sources.\r\n\r\nThis module is in use of production and ease me all time adding new server or change configuration of SumoLogic:)\r\n\r\nHave a fun with SumoLogic! Windows Powershell will help your Windows life!\r\n\r\n# SumoLogic Collector Management API\r\n\r\nSee here.\r\n\r\n[SumoLogic/sumo-api-doc](https://github.com/SumoLogic/sumo-api-doc/wiki/collector-management-api)\r\n\r\n# Cmdlets\r\n\r\nYou can check what kind of functions included in module.\r\n\r\n```\r\nGet-Command -Module PSSumoLogicApi\r\n```\r\n\r\nHere's Cmdlets use in public\r\n\r\n|CommandType|Name|ModuleName|\r\n|----|----|----|\r\n|Function|    Get-PSSumoLogicApiCollector          |PSSumoLogicApi|\r\n|Function|    Get-PSSumoLogicApiCollectorSource    |PSSumoLogicApi|\r\n|Function|    Get-PSSumoLogicApiCredential         |PSSumoLogicApi|\r\n|Function|    Get-PSSumoLogicApiWebSession         |PSSumoLogicApi|\r\n|Function|    New-PSSumoLogicApiCredential         |PSSumoLogicApi|\r\n|Function|    Remove-PSSumoLogicApiCollector       |PSSumoLogicApi|\r\n|Function|    Remove-PSSumoLogicApiCollectorSource |PSSumoLogicApi|\r\n|Function|    Set-PSSumoLogicApiCollectorSource    |PSSumoLogicApi|\r\n\r\n\r\n# Test\r\n\r\nYou can find sample source in [Test](https://github.com/guitarrapc/PSSumoLogicAPI/tree/master/PSSumoLogicAPI/Test)\r\n\r\n## Credential\r\n\r\nMake sure SumoLogicAPI requires credential authentication for only first session.\r\nYou will retrieve authenticated cookies when sending any API request with UserName/Password.\r\nUse this authenticated cookies as WebSession then you do not need to pass credential afterward.\r\n\r\nMake sure there is API limitation to try call API with credential, to retrieve websession/cookies.\r\nIf you call API for continuous 15 times, then you will be rejected from API for 60 sec.\r\n\r\n### Create Credential secure Password File\r\n\r\n```PowerShell\r\nNew-PSSumoLogicApiCredential -user hoge@hoge.com\r\n```\r\n\r\nif you configure ```.\\PSSumoLogicAPI\\config\\PSSumoLogicAPI-config.ps1``` as to input username, \r\n\r\n```PowerShell\r\n$PSSumoLogicAPI.credential = @{\r\n    user                           = \"INPUT YOUR Email Address to logon\"\r\n}\r\n\r\n#change it like\r\n\r\n$PSSumoLogicAPI.credential = @{\r\n    user                           = \"hoge@hoge.com\"\r\n}\r\n```\r\nyou can omit -user parameter, as default use ```$PSSumoLogicAPI.credential.user```, in this case hoge@hoge.com\r\n\r\n```PowerShell\r\nNew-PSSumoLogicApiCredential\r\n```\r\n\r\n\r\n### Get Credential secure Password from file\r\n\r\nOnece you create credential, you can get it easily.\r\n\r\n```PowerShell\r\nGet-PSSumoLogicApiCredential -user hoge@hoge.com\r\n```\r\n\r\nyou can omit username if you configure ```.\\PSSumoLogicAPI\\config\\PSSumoLogicAPI-config.ps1```\r\n\r\n```PowerShell\r\nGet-PSSumoLogicApiCredential\r\n```\r\n\r\nyou can reuse Credential.\r\n\r\n```PowerShell\r\n$credential = Get-PSSumoLogicApiCredential\r\n```\r\n\r\n## Web Session\r\n\r\nBefore starting call SumoLogic API, set authenticated websessions to $PSSumoLogicAPI.Websession module variable.\r\nAfter set this session, you can ignore any credential/session when call API.\r\n\r\n### Set Authenticated cookies to $PSSumoLogicAPI.Websession\r\n\r\nGet crednetial when obtain Websession.\r\n\r\n```PowerShell\r\n# Get Credential\r\n$credential = Get-PSSumoLogicApiCredential\r\n```\r\n\r\nThen call SumoLogic API to get Web Session. If you add -PassThru switch, then retrived value will show in host.\r\n\r\n```PowerShell\r\n# Obtain Session Variables\r\n$host.Ui.WriteVerboseLine(\"Get Sessionvariables and PassThru\")\r\nGet-PSSumoLogicApiWebSession -PassThru\r\n```\r\n\r\nWeb Session value in contains in Module variable $PSSumoLogicAPI.WebSession.\r\n\r\n```Powershell\r\n$host.Ui.WriteVerboseLine(\"Output whether session contains in PSSumoLogicAPI variable.\")\r\n$PSSumoLogicAPI.WebSession\r\n```\r\n\r\n## Collector\r\n\r\n### Get SumoLogic Collectors of your account\r\n\r\nNow you can call SumoLogicAPI.\r\n\r\n```PowerShell\r\n$Collectors = Get-PSSumoLogicApiCollectors\r\n$Collectors\r\n```\r\n\r\nspecify collector ids.\r\n\r\n```PowerShell\r\n# Obtain each Collectors for first 5\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request for each collectorId\")\r\nGet-PSSumoLogicApiCollector -Id ($collectors.Id | select -First 5)\r\n```\r\n\r\nfor multiple collectorIds, you can use -Async switch to invoke command asynchronous.\r\n\r\n```PowerShell\r\n# Obtain each Collectors for first 5\r\n$host.Ui.WriteVerboseLine(\"Running Asynchronous request for each CollectorId\")\r\nGet-PSSumoLogicApiCollector -Id ($collectors.Id | select -First 5) -Async -Verbose\r\n```\r\n\r\nIt will speed up about 2-10 times then synchronous each collector id calls.\r\n\r\n### Remove Collectors\r\n\r\nSpecify Collector id to remove collectors.\r\n\r\n```PowerShell\r\n# Remove each Collectors\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request for each collectorId to remove collectors\")\r\nRemove-PSSumoLogicApiCollector -Id $Collectors.id\r\n```\r\n\r\nfor multiple collectorIds, you can use -Async switch to invoke command asynchronous.\r\nAsynchronouse execution will speed up.\r\n\r\n```PowerShell\r\n# Obtain each Collectors\r\n$host.Ui.WriteVerboseLine(\"Running Asynchronous request for each collectorId to remove collectors\")\r\nRemove-PSSumoLogicApiCollector -Id $Collectors.id -Async\r\n```\r\n\r\nIt may good to filter Collector name, OS or status to select which collector to delete.\r\nWhere-Object or .Where({}) will ease you filtering object.\r\n\r\n## Source\r\n\r\n### Get Collector Source\r\n\r\nGet all collectors source.\r\n\r\n```PowerShell\r\n# Obtain Collectors\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to get collectors\")\r\n$collectors = Get-PSSumoLogicApiCollector\r\n\r\n# Obtain Source\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to get sources\")\r\nGet-PSSumoLogicApiCollectorSource -CollectorId $collectors.id -Verbose\r\n```\r\n\r\nGet First 4 Collectors source.\r\n\r\n```PowerShell\r\n# Obtain Source\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to get sources\")\r\nGet-PSSumoLogicApiCollectorSource -CollectorId $collectors.id -Verbose\r\n```\r\n\r\nfor multiple collectorIds, you can use -Async switch to invoke command asynchronous.\r\nAsynchronouse execution will speed up for 2-10 times then synchronous call.\r\n\r\n```PowerShell\r\n$host.Ui.WriteVerboseLine(\"Running Asynchronous request to get sources\")\r\nGet-PSSumoLogicApiCollectorSource -CollectorId $collectors.id -Async -Verbose\r\n```\r\n\r\n### Set SumoLogic Source for Collectors of your account\r\n\r\nYou can set for each Source Type, will show in intellisence.\r\n\r\n```PowerShell\r\n# Obtain Collectors\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to get collectors\")\r\n$collectors = Get-PSSumoLogicApiCollector | Select -First 2\r\n\r\n# Set Sources\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to set sources\")\r\n$param = @{\r\n    Id             = $Collectors.Id\r\n    pathExpression = \"C:\\logs\\Log.log\"\r\n    name           = \"Log\"\r\n    sourceType     = \"LocalFile\"\r\n    category       = \"Log Category\"\r\n    description    = \"Log Description\"\r\n}\r\nSet-PSSumoLogicApiCollectorSource @param -Verbose\r\n```\r\n\r\nfor multiple collectorIds, you can use -Async switch to invoke command asynchronous.\r\nAsynchronouse execution will speed up for 2-10 times then synchronous call.\r\n\r\n```PowerShell\r\n# Set Sources\r\n$host.Ui.WriteVerboseLine(\"Running Asynchronous request to set sources\")\r\n$param = @{\r\n    Id             = $Collectors.Id\r\n    pathExpression = \"C:\\logs\\Log.log\"\r\n    name           = \"Log\"\r\n    sourceType     = \"LocalFile\"\r\n    category       = \"Log Category\"\r\n    description    = \"Log Description\"\r\n}\r\nSet-PSSumoLogicApiCollectorSource @param -Async -Verbose\r\n```\r\n\r\n### Remove Source\r\n\r\nYou can set Remove for each Sources in Collectors.\r\n\r\n```PowerShell\r\n# Obtain Collectors\r\n$host.Ui.WriteVerboseLine(\"Running Synchronize request to get collectors\")\r\n$collectors = Get-PSSumoLogicApiCollector | select -First 5\r\n\r\n# obtain Sources and remove it\r\n$collectors `\r\n| %{\r\n    $host.Ui.WriteVerboseLine(\"Running Synchronize request to get sources\")\r\n    $souces = Get-PSSumoLogicApiCollectorSource -CollectorId $_.id | where Name -eq \"Log\"\r\n\r\n    # Remove each souces in per Collectors\r\n    $host.Ui.WriteVerboseLine(\"Running Synchronize request for each collectorId\")\r\n    Remove-PSSumoLogicApiCollectorSource -CollectorId $_.id -Id $souces.id}\r\n```\r\n\r\nfor multiple collectorIds, you can use -Async switch to invoke command asynchronous.\r\nAsynchronouse execution will speed up for 2-10 times then synchronous call.\r\n\r\n```PowerShell\r\n# obtain Sources and remove it\r\n$collectors `\r\n| %{\r\n    $host.Ui.WriteVerboseLine(\"Running Asynchronous request to get sources\")\r\n    $souces = Get-PSSumoLogicApiCollectorSource -CollectorId $_.id -Async\r\n\r\n    # Remove each souces in per Collectors\r\n    $host.Ui.WriteVerboseLine(\"Running Asynchronous request for each collectorId\")\r\n    Remove-PSSumoLogicApiCollectorSource -CollectorId $_.id -Id $souces.id -Async}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}